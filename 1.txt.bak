<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>Blue Archive Dating Sim</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #5d6dfa;
      --secondary: #f8a5ff;
      --text: #f0f0f0;
      --bg-dark: rgba(0, 0, 0, 0.7);
    }

    body, html {
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
      height: 100%;
      background-size: cover;
      background-image: url('wallpaper.jpg');
      background-position: center;
      color: var(--text);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      overflow: hidden;
    }

    #game {
      background: var(--bg-dark);
      padding: 20px;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      max-height: 90vh;
      overflow-y: auto;
    }

    h1 { font-size: 1.8rem; color: var(--secondary); }
    h2 { font-size: 1.4rem; color: var(--secondary); }

    input {
      padding: 10px 15px;
      font-size: 1rem;
      border-radius: 8px;
      border: 2px solid var(--primary);
      width: 80%;
      margin: 10px 0;
      background: rgba(0, 123, 255, 0.15);
      color: var(--text);
    }

    button {
      margin: 8px;
      padding: 12px 24px;
      font-size: 1rem;
      font-weight: bold;
      border: none;
      border-radius: 10px;
      background: linear-gradient(145deg, #5e6bff, #8ea2ff);
      color: white;
      cursor: pointer;
      box-shadow: 0 4px 15px rgba(102, 122, 255, 0.4);
      transition: all 0.3s ease;
    }

    button:hover {
      background: linear-gradient(145deg, #7686ff, #a5b7ff);
      transform: scale(1.05);
      box-shadow: 0 6px 20px rgba(118, 134, 255, 0.7);
    }

    button:active {
      transform: scale(0.97);
      box-shadow: 0 3px 10px rgba(102, 122, 255, 0.3);
    }

    #storyText {
      line-height: 1.5;
      margin: 15px 0;
      max-height: 40vh;
      overflow-y: auto;
    }

    .character-image {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--secondary);
      margin: 10px auto;
    }

    .hidden { display: none; }

    #notif {
      position: fixed;
      bottom: 20px;
      background-color: rgba(30, 30, 30, 0.9);
      color: #fff;
      padding: 15px 25px;
      border-radius: 12px;
      font-size: 1rem;
      box-shadow: 0 4px 15px rgba(0,0,0,0.4);
      display: none;
      animation: fadein 0.5s ease;
    }

    @keyframes fadein {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @media (max-height: 600px) {
      #game { padding: 15px; }
      h1 { font-size: 1.5rem; }
      h2 { font-size: 1.2rem; }
      #storyText { max-height: 30vh; }
    }
  </style>
</head>
<body>
  <div id="game">
    <div id="inputName">
      <h1>Blue Archive Dating Sim</h1>
      <input type="text" id="playerName" placeholder="Masukkan namamu">
      <button onclick="startGame()">Mulai</button>
    </div>

    <div id="story" class="hidden">
      <h2 id="chapterTitle"></h2>
      <img id="characterImage" class="character-image hidden">
      <p id="storyText"></p>
      <div id="choices"></div>
    </div>

    <div id="ending" class="hidden">
      <h2 id="endingTitle"></h2>
      <img id="endingImage" class="character-image">
      <p id="endingText"></p>
      <button onclick="restartGame()">Main Lagi</button>
    </div>
  </div>

  <div id="notif"></div>

  <script>
    const gameData = [
      {
        bg: '1.jpg',
        title: 'Chapter 1: Pertemuan Awal',
        character: { name: 'Arona', image: 'arona.png' },
        text: (name) => `Hari pertama di Akademi Kivotos. Arona menyambutmu:\n\n"Hai ${name}! Aku Arona, asisten Sensei di sini!"`,
        choices: [
          { text: 'Senyum dan jabat tangan', effect: +2, response: 'Kamu ramah sekali! Aku yakin kita akan akrab!' },
          { text: 'Mengangguk saja', effect: 0, response: 'Oh... kamu pemalu ya?' },
          { text: 'Abaikan', effect: -2, response: 'Hmm, mungkin dia sedang tidak mood.' }
        ]
      },
      {
        bg: '2.jpg',
        title: 'Chapter 2: Waktu Bersama',
        character: { name: 'Hoshino', image: 'hoshino.png' },
        text: (name) => `Hoshino tidur siang di taman:\n\n"Ah... ${name} ya? Mau tidur siang juga?"`,
        choices: [
          { text: 'Tawarkan minuman', effect: +2, response: 'Wah, terima kasih~ Kamu baik sekali.' },
          { text: 'Tegur dia', effect: -1, response: 'Hah? Aku kan lelah. Jangan ganggu.' },
          { text: 'Abaikan', effect: -2, response: '...' }
        ]
      },
      {
        bg: '3.jpg',
        title: 'Chapter 3: Patroli',
        character: { name: 'Shiroko', image: 'shiroko.png' },
        text: (name) => `Shiroko mengajakmu patroli:\n\n"${name}, apa arti pertemanan bagimu?"`,
        choices: [
          { text: 'Saling percaya', effect: +3, response: 'Aku senang kamu berpikir begitu.' },
          { text: 'Saling memanfaatkan', effect: -3, response: 'Aku tidak setuju.' },
          { text: 'Tidak yakin', effect: 0, response: 'Itu jawaban yang jujur.' }
        ]
      }
    ];

    const endings = [
      {
        title: "Ending Buruk",
        image: "bad.jpg",
        text: (name) => `Sayang ${name}, pilihanmu membuat semua orang menjauh.`,
        minScore: -999,
        maxScore: -3
      },
      {
        title: "Ending Netral",
        image: "netral.jpg",
        text: (name) => `${name}, hidupmu di Kivotos berjalan biasa saja.`,
        minScore: -2,
        maxScore: 2
      },
      {
        title: "Ending Baik",
        image: "good.jpg",
        text: (name) => `Selamat ${name}! Banyak siswa menganggapmu teman yang baik.`,
        minScore: 3,
        maxScore: 999
      }
    ];

    let currentChapter = 0;
    let score = 0;
    let playerName = '';

    function showNotif(message) {
      const notif = document.getElementById('notif');
      notif.textContent = message;
      notif.style.display = 'block';
      setTimeout(() => notif.style.display = 'none', 3000);
    }

    function startGame() {
      const input = document.getElementById('playerName').value.trim();
      if (!input) return alert('Masukkan nama dulu!');
      playerName = input;
      document.getElementById('inputName').classList.add('hidden');
      document.getElementById('story').classList.remove('hidden');
      loadChapter();
    }

    function loadChapter() {
      if (currentChapter >= gameData.length) {
        showEnding();
        return;
      }

      const chapter = gameData[currentChapter];
      document.body.style.backgroundImage = `url('${chapter.bg}')`;
      document.getElementById('chapterTitle').textContent = chapter.title;
      document.getElementById('storyText').textContent = chapter.text(playerName);
      const charImg = document.getElementById('characterImage');
      charImg.src = chapter.character.image;
      charImg.classList.remove('hidden');

      const choicesDiv = document.getElementById('choices');
      choicesDiv.innerHTML = '';
      chapter.choices.forEach((choice, index) => {
        const btn = document.createElement('button');
        btn.textContent = choice.text;
        btn.onclick = () => {
          score += choice.effect;
          showNotif(choice.response);
          currentChapter++;
          setTimeout(loadChapter, 1200);
        };
        choicesDiv.appendChild(btn);
      });
    }

    function showEnding() {
      document.getElementById('story').classList.add('hidden');
      document.getElementById('ending').classList.remove('hidden');
      const ending = endings.find(e => score >= e.minScore && score <= e.maxScore);
      document.getElementById('endingTitle').textContent = ending.title;
      document.getElementById('endingImage').src = ending.image;
      document.getElementById('endingText').textContent = ending.text(playerName);
    }

    function restartGame() {
      currentChapter = 0;
      score = 0;
      playerName = '';
      document.getElementById('ending').classList.add('hidden');
      document.getElementById('inputName').classList.remove('hidden');
      document.getElementById('playerName').value = '';
    }
  </script>
</body>
</html>